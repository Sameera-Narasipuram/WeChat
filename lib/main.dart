import 'dart:developer'; // For log() function
import 'package:firebase_core/firebase_core.dart'; // Core Firebase functionality
import 'package:flutter/material.dart'; // Material Design widgets
import 'package:flutter/services.dart'; // For SystemChrome
import 'package:flutter_notification_channel/flutter_notification_channel.dart'; // For notifications (mobile only)
import 'package:flutter_notification_channel/notification_importance.dart'; // For notification importance (mobile only)
import 'package:flutter/foundation.dart'; // Import kIsWeb for platform detection

// Make sure this path is correct for your project!
import 'firebase_options.dart'; // Firebase configuration generated by FlutterFire

// Your splash screen widget
import 'screens/splash_screen.dart';

// Global object for accessing device screen size, initialized after app starts
late Size mq;

Future<void> main() async {
  // Ensure that Flutter's binding is initialized. This is crucial if you
  // perform any asynchronous operations (like Firebase.initializeApp)
  // before calling runApp().
  WidgetsFlutterBinding.ensureInitialized();

  // Set system UI mode (e.g., full-screen).
  // This is primarily for mobile. On web, it might not have the same effect
  // or could cause warnings, so we apply it conditionally.
  if (!kIsWeb) {
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
  }

  // Set preferred orientations.
  // This is also primarily for mobile devices and does not apply to web browsers.
  // We apply it conditionally to avoid unnecessary calls on web.
  if (!kIsWeb) {
    await SystemChrome.setPreferredOrientations(
      [DeviceOrientation.portraitUp, DeviceOrientation.portraitDown],
    );
  }

  // Initialize Firebase and other services
  await _initializeFirebase();

  // Run the Flutter application, starting with MyApp.
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Initialize mq (media query) after the build context is available.
    // This gives you the screen size information.
    mq = MediaQuery.sizeOf(context);

    return MaterialApp(
      title: 'We Chat', // Your app's title
      debugShowCheckedModeBanner: false, // Set to false for production builds
      theme: ThemeData(
        useMaterial3: false, // Whether to use Material 3 design
        appBarTheme: const AppBarTheme(
          centerTitle: true,
          elevation: 1,
          iconTheme: IconThemeData(color: Colors.black),
          titleTextStyle: TextStyle(
            color: Colors.black,
            fontWeight: FontWeight.normal,
            fontSize: 19,
          ),
          backgroundColor: Colors.white,
        ),
        // --- IMPORTANT: Added to address the Noto font warning ---
        // This sets a default font family for your app.
        // You MUST also add the Noto Sans font files to your 'fonts/' folder
        // and declare them in your pubspec.yaml file for this to work.
        fontFamily: 'NotoSans',
      ),
      home: const SplashScreen(), // Your app starts with the SplashScreen
    );
  }
}

// Helper function to initialize Firebase and other services
Future<void> _initializeFirebase() async {
  try {
    // Initialize Firebase with platform-specific options.
    // Ensure 'firebase_options.dart' is correctly generated by 'flutterfire configure'.
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    log('Firebase initialized successfully!');
  } catch (e) {
    // Log any errors that occur during Firebase initialization.
    // This is crucial for debugging setup issues.
    log('Error initializing Firebase: $e');
    // You might want to display an error message to the user or retry.
  }

  // ONLY run notification channel registration if it's NOT on the web.
  // Notification channels are an Android-specific feature and not applicable to web.
  if (!kIsWeb) {
    var result = await FlutterNotificationChannel().registerNotificationChannel(
      description: 'For Showing Message Notification',
      id: 'chats',
      importance: NotificationImportance.IMPORTANCE_HIGH,
      name: 'Chats',
    );
    log('\nNotification Channel Result: $result');
  } else {
    // Optional: Log that notification channel registration is skipped on web.
    log('Skipping notification channel registration on web.');
  }
}